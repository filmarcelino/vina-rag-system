#!/usr/bin/env python3
"""
Demo do Sistema de Governan√ßa RAG

Este script demonstra o uso completo do sistema de governan√ßa,
incluindo monitoramento de cobertura, an√°lise de fontes,
detec√ß√£o de obsolesc√™ncia e dashboard unificado.
"""

import sys
import json
from pathlib import Path
from datetime import datetime, timedelta

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

from governance import (
    coverage_monitor,
    source_analyzer, 
    obsolescence_detector,
    governance_dashboard
)

def demo_coverage_monitoring():
    """Demonstra o monitoramento de cobertura"""
    print("\n" + "="*60)
    print("üìä DEMONSTRA√á√ÉO: MONITORAMENTO DE COBERTURA")
    print("="*60)
    
    # Simula algumas consultas
    sample_queries = [
        "Como implementar autentica√ß√£o JWT em Next.js?",
        "Configurar Tailwind CSS com componentes Shadcn/UI",
        "Melhores pr√°ticas para testes E2E com Playwright",
        "Como otimizar performance em React com useMemo?",
        "Implementar dark mode com Tailwind CSS",
        "Configurar ESLint e Prettier em projeto TypeScript",
        "Como usar React Query para cache de dados?",
        "Implementar upload de arquivos com Next.js API"
    ]
    
    print("\nüîç Registrando consultas de exemplo...")
    for query in sample_queries:
        # Simula resultados para a query
        mock_results = [
            {"id": f"result_{i}", "score": 0.8 - (i * 0.1), "content": f"Resultado {i+1} para: {query[:30]}"}
            for i in range(3)  # 3 resultados por query
        ]
        coverage_monitor.analyze_query_coverage(query, mock_results)
        print(f"  ‚úì {query[:50]}...")
    
    # Gera relat√≥rio de cobertura
    print("\nüìà Gerando relat√≥rio de cobertura...")
    coverage_report = coverage_monitor.generate_coverage_report()
    
    print(f"\nüìä RESULTADOS DE COBERTURA:")
    print(f"  ‚Ä¢ Cobertura Geral: {coverage_report.overall_coverage:.1%}")
    print(f"  ‚Ä¢ Total de T√≥picos: {coverage_report.total_topics}")
    print(f"  ‚Ä¢ T√≥picos Bem Cobertos: {coverage_report.well_covered_topics}")
    print(f"  ‚Ä¢ T√≥picos Mal Cobertos: {coverage_report.poorly_covered_topics}")
    print(f"  ‚Ä¢ Lacunas de Cobertura: {len(coverage_report.coverage_gaps)}")
    
    if coverage_report.trending_topics:
        print(f"\nüî• T√≥picos em Alta:")
        for topic in coverage_report.trending_topics[:5]:
            print(f"  ‚Ä¢ {topic}")
    
    if coverage_report.coverage_gaps:
        print(f"\n‚ö†Ô∏è Principais Lacunas:")
        for gap in coverage_report.coverage_gaps[:3]:
            print(f"  ‚Ä¢ {gap}")
    
    if coverage_report.recommendations:
        print(f"\nüí° Recomenda√ß√µes:")
        for rec in coverage_report.recommendations[:3]:
            print(f"  ‚Ä¢ {rec}")

def demo_source_analysis():
    """Demonstra a an√°lise de fontes"""
    print("\n" + "="*60)
    print("üìö DEMONSTRA√á√ÉO: AN√ÅLISE DE FONTES")
    print("="*60)
    
    # Simula dados de acesso a fontes
    sample_sources = [
        {"id": "nextjs-docs", "category": "framework", "access_count": 150, "last_accessed": datetime.now() - timedelta(hours=2)},
        {"id": "react-docs", "category": "library", "access_count": 200, "last_accessed": datetime.now() - timedelta(hours=1)},
        {"id": "tailwind-docs", "category": "styling", "access_count": 120, "last_accessed": datetime.now() - timedelta(hours=3)},
        {"id": "shadcn-ui", "category": "components", "access_count": 80, "last_accessed": datetime.now() - timedelta(hours=4)},
        {"id": "old-jquery-guide", "category": "library", "access_count": 5, "last_accessed": datetime.now() - timedelta(days=30)},
        {"id": "deprecated-api", "category": "api", "access_count": 2, "last_accessed": datetime.now() - timedelta(days=60)},
        {"id": "playwright-docs", "category": "testing", "access_count": 45, "last_accessed": datetime.now() - timedelta(hours=6)},
        {"id": "typescript-handbook", "category": "language", "access_count": 90, "last_accessed": datetime.now() - timedelta(hours=5)}
    ]
    
    print("\nüìù Registrando acessos a fontes...")
    for source in sample_sources:
        # Simula m√∫ltiplos acessos
        for _ in range(source["access_count"]):
            source_analyzer.record_source_access(
                source["id"], 
                source["category"],
                source["last_accessed"]
            )
        print(f"  ‚úì {source['id']} ({source['access_count']} acessos)")
    
    # Gera relat√≥rio de an√°lise
    print("\nüìä Gerando relat√≥rio de an√°lise de fontes...")
    analysis_report = source_analyzer.generate_analysis_report()
    
    print(f"\nüìà RESULTADOS DA AN√ÅLISE:")
    print(f"  ‚Ä¢ Total de Fontes: {analysis_report.total_sources}")
    print(f"  ‚Ä¢ Fontes Ativas: {analysis_report.active_sources}")
    print(f"  ‚Ä¢ Fontes Obsoletas: {analysis_report.obsolete_sources}")
    print(f"  ‚Ä¢ Fontes de Alto Valor: {analysis_report.high_value_sources}")
    print(f"  ‚Ä¢ Fontes de Baixo Valor: {analysis_report.low_value_sources}")
    
    # Mostra fontes de alto valor
    high_value = source_analyzer.identify_high_value_sources()
    if high_value:
        print(f"\n‚≠ê Fontes de Alto Valor:")
        for source in high_value[:5]:
            print(f"  ‚Ä¢ {source['source_id']}: {source['usage_count']} acessos, score {source['overall_score']:.2f}")
    
    # Mostra fontes obsoletas
    obsolete = source_analyzer.identify_obsolete_sources()
    if obsolete:
        print(f"\nüóëÔ∏è Fontes Obsoletas:")
        for source in obsolete[:3]:
            print(f"  ‚Ä¢ {source['source_id']}: {', '.join(source['reasons'])}")
    
    if analysis_report.recommendations:
        print(f"\nüí° Recomenda√ß√µes:")
        for rec in analysis_report.recommendations[:3]:
            print(f"  ‚Ä¢ {rec}")

def demo_obsolescence_detection():
    """Demonstra a detec√ß√£o de obsolesc√™ncia"""
    print("\n" + "="*60)
    print("‚ö†Ô∏è DEMONSTRA√á√ÉO: DETEC√á√ÉO DE OBSOLESC√äNCIA")
    print("="*60)
    
    # Simula fontes com conte√∫do potencialmente obsoleto
    sample_sources = [
        {
            "id": "react-class-components",
            "content": "Como criar componentes React usando class components e componentDidMount",
            "metadata": {"category": "react", "last_updated": "2020-01-15"}
        },
        {
            "id": "jquery-ajax", 
            "content": "Fazendo requisi√ß√µes AJAX com jQuery $.ajax() e callbacks",
            "metadata": {"category": "javascript", "last_updated": "2019-06-10"}
        },
        {
            "id": "webpack-v4",
            "content": "Configurando Webpack 4 com babel-loader e css-loader",
            "metadata": {"category": "build-tools", "last_updated": "2021-03-20"}
        },
        {
            "id": "modern-react-hooks",
            "content": "Usando React Hooks: useState, useEffect, useContext e custom hooks",
            "metadata": {"category": "react", "last_updated": "2023-08-15"}
        },
        {
            "id": "nextjs-13-app-router",
            "content": "Next.js 13 App Router com Server Components e streaming",
            "metadata": {"category": "nextjs", "last_updated": "2023-10-01"}
        },
        {
            "id": "node-callbacks",
            "content": "Programa√ß√£o ass√≠ncrona em Node.js usando callbacks e error-first pattern",
            "metadata": {"category": "nodejs", "last_updated": "2018-12-05"}
        }
    ]
    
    print("\nüîç Analisando fontes para detec√ß√£o de obsolesc√™ncia...")
    
    all_detections = []
    for source in sample_sources:
        detections = obsolescence_detector.scan_source(
            source["id"],
            source["content"],
            source["metadata"]
        )
        all_detections.extend(detections)
        
        if detections:
            print(f"  ‚ö†Ô∏è {source['id']}: {len(detections)} problemas detectados")
        else:
            print(f"  ‚úÖ {source['id']}: nenhum problema detectado")
    
    # Gera relat√≥rio de obsolesc√™ncia
    print("\nüìä Gerando relat√≥rio de obsolesc√™ncia...")
    obsolescence_report = obsolescence_detector.generate_obsolescence_report()
    
    print(f"\nüö® RESULTADOS DA DETEC√á√ÉO:")
    print(f"  ‚Ä¢ Total de Detec√ß√µes: {obsolescence_report.total_detections}")
    print(f"  ‚Ä¢ Problemas Cr√≠ticos: {obsolescence_report.critical_issues}")
    print(f"  ‚Ä¢ Problemas de Alta Prioridade: {obsolescence_report.high_issues}")
    print(f"  ‚Ä¢ Problemas de M√©dia Prioridade: {obsolescence_report.medium_issues}")
    print(f"  ‚Ä¢ Fontes Afetadas: {obsolescence_report.sources_with_issues}")
    
    # Mostra resumo por regra
    if obsolescence_report.summary_by_rule:
        print(f"\nüìã Resumo por Tipo de Problema:")
        for rule_id, count in list(obsolescence_report.summary_by_rule.items())[:5]:
            print(f"  ‚Ä¢ {rule_id}: {count} ocorr√™ncias")
    
    # Mostra detec√ß√µes cr√≠ticas
    critical_detections = [d for d in all_detections if d.severity == "critical"]
    if critical_detections:
        print(f"\nüî¥ Problemas Cr√≠ticos Detectados:")
        for detection in critical_detections[:3]:
            print(f"  ‚Ä¢ {detection.source_id}: {detection.rule_id}")
            print(f"    Descri√ß√£o: {detection.description}")
            if detection.suggestion:
                print(f"    Sugest√£o: {detection.suggestion}")
    
    if obsolescence_report.recommendations:
        print(f"\nüí° Recomenda√ß√µes:")
        for rec in obsolescence_report.recommendations[:3]:
            print(f"  ‚Ä¢ {rec}")

def demo_governance_dashboard():
    """Demonstra o dashboard de governan√ßa unificado"""
    print("\n" + "="*60)
    print("üéõÔ∏è DEMONSTRA√á√ÉO: DASHBOARD DE GOVERNAN√áA")
    print("="*60)
    
    print("\nüîÑ Gerando dashboard unificado...")
    dashboard = governance_dashboard.generate_dashboard()
    
    print(f"\nüìä M√âTRICAS CONSOLIDADAS:")
    print(f"  ‚Ä¢ Score de Governan√ßa: {dashboard.metrics.governance_score:.1%}")
    print(f"  ‚Ä¢ Score de Sa√∫de: {dashboard.metrics.health_score:.1%}")
    print(f"  ‚Ä¢ Score de Qualidade: {dashboard.metrics.quality_score:.1%}")
    
    print(f"\nüéØ Resumo de Cobertura:")
    print(f"  ‚Ä¢ Cobertura Geral: {dashboard.coverage_summary['overall_coverage']}")
    print(f"  ‚Ä¢ Total de T√≥picos: {dashboard.coverage_summary['total_topics']}")
    print(f"  ‚Ä¢ Lacunas: {dashboard.coverage_summary['gaps_count']}")
    
    print(f"\nüìö Resumo de Fontes:")
    print(f"  ‚Ä¢ Total: {dashboard.source_summary['total_sources']}")
    print(f"  ‚Ä¢ Ativas: {dashboard.source_summary['active_sources']}")
    print(f"  ‚Ä¢ Obsoletas: {dashboard.source_summary['obsolete_sources']}")
    print(f"  ‚Ä¢ Alto Valor: {dashboard.source_summary['high_value_sources']}")
    
    print(f"\n‚ö†Ô∏è Resumo de Obsolesc√™ncia:")
    print(f"  ‚Ä¢ Total de Detec√ß√µes: {dashboard.obsolescence_summary['total_detections']}")
    print(f"  ‚Ä¢ Problemas Cr√≠ticos: {dashboard.obsolescence_summary['critical_issues']}")
    print(f"  ‚Ä¢ Fontes Afetadas: {dashboard.obsolescence_summary['sources_affected']}")
    
    # Mostra alertas
    if dashboard.alerts:
        print(f"\nüö® Alertas Ativos:")
        for alert in dashboard.alerts:
            icon = "üî¥" if alert["type"] == "critical" else "üü°"
            print(f"  {icon} {alert['category'].title()}: {alert['message']}")
    else:
        print(f"\n‚úÖ Nenhum alerta ativo")
    
    # Mostra recomenda√ß√µes principais
    if dashboard.recommendations:
        print(f"\nüí° Principais Recomenda√ß√µes:")
        for i, rec in enumerate(dashboard.recommendations[:5], 1):
            print(f"  {i}. {rec}")
    
    # Status de sa√∫de
    print("\nüè• Verificando status de sa√∫de...")
    health_status = governance_dashboard.get_health_status()
    
    status_icons = {
        "excellent": "üü¢",
        "good": "üü°", 
        "warning": "üü†",
        "critical": "üî¥",
        "unknown": "‚ö™",
        "error": "‚ùå"
    }
    
    icon = status_icons.get(health_status["status"], "‚ùì")
    print(f"  {icon} Status: {health_status['status'].upper()}")
    print(f"  üìù {health_status['message']}")
    
    if "overall_health" in health_status:
        print(f"  üìä Sa√∫de Geral: {health_status['overall_health']:.1%}")
    
    # A√ß√µes priorit√°rias
    print("\nüéØ Verificando a√ß√µes priorit√°rias...")
    priority_actions = governance_dashboard.get_priority_actions()
    
    if priority_actions:
        print(f"\n‚ö° A√ß√µes Priorit√°rias:")
        for i, action in enumerate(priority_actions[:5], 1):
            priority_icons = {"critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üü¢"}
            icon = priority_icons.get(action["priority"], "‚ö™")
            print(f"  {i}. {icon} {action['action']}")
            print(f"     {action['description']} (Esfor√ßo: {action['estimated_effort']})")
    else:
        print(f"  ‚úÖ Nenhuma a√ß√£o priorit√°ria necess√°ria")

def demo_export_reports():
    """Demonstra a exporta√ß√£o de relat√≥rios"""
    print("\n" + "="*60)
    print("üìÑ DEMONSTRA√á√ÉO: EXPORTA√á√ÉO DE RELAT√ìRIOS")
    print("="*60)
    
    print("\nüìä Exportando relat√≥rios em diferentes formatos...")
    
    try:
        # Exporta em JSON
        print("\nüìã Exportando relat√≥rio JSON...")
        json_file = governance_dashboard.export_governance_report("json")
        print(f"  ‚úÖ Relat√≥rio JSON salvo: {Path(json_file).name}")
        
        # Exporta em Markdown
        print("\nüìù Exportando relat√≥rio Markdown...")
        md_file = governance_dashboard.export_governance_report("markdown")
        print(f"  ‚úÖ Relat√≥rio Markdown salvo: {Path(md_file).name}")
        
        # Exporta em HTML
        print("\nüåê Exportando relat√≥rio HTML...")
        html_file = governance_dashboard.export_governance_report("html")
        print(f"  ‚úÖ Relat√≥rio HTML salvo: {Path(html_file).name}")
        
        print(f"\nüìÅ Todos os relat√≥rios foram salvos no diret√≥rio: data/governance/")
        
    except Exception as e:
        print(f"  ‚ùå Erro ao exportar relat√≥rios: {e}")

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("üéõÔ∏è SISTEMA DE GOVERNAN√áA RAG - DEMONSTRA√á√ÉO COMPLETA")
    print("=" * 80)
    print("\nEste demo mostra todas as funcionalidades do sistema de governan√ßa:")
    print("‚Ä¢ Monitoramento de cobertura de t√≥picos")
    print("‚Ä¢ An√°lise de utilidade e relev√¢ncia de fontes")
    print("‚Ä¢ Detec√ß√£o autom√°tica de conte√∫do obsoleto")
    print("‚Ä¢ Dashboard unificado com m√©tricas consolidadas")
    print("‚Ä¢ Exporta√ß√£o de relat√≥rios em m√∫ltiplos formatos")
    
    try:
        # Executa todas as demonstra√ß√µes
        demo_coverage_monitoring()
        demo_source_analysis()
        demo_obsolescence_detection()
        demo_governance_dashboard()
        demo_export_reports()
        
        print("\n" + "="*80)
        print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("\nüéØ O sistema de governan√ßa est√° funcionando corretamente e oferece:")
        print("  ‚Ä¢ Monitoramento cont√≠nuo da qualidade do conhecimento")
        print("  ‚Ä¢ Identifica√ß√£o proativa de problemas e oportunidades")
        print("  ‚Ä¢ M√©tricas consolidadas para tomada de decis√£o")
        print("  ‚Ä¢ Relat√≥rios detalhados para an√°lise e auditoria")
        print("  ‚Ä¢ Alertas autom√°ticos para problemas cr√≠ticos")
        print("\nüöÄ O sistema est√° pronto para integra√ß√£o com o RAG principal!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE A DEMONSTRA√á√ÉO: {e}")
        print("\nüîß Verifique se todos os m√≥dulos est√£o instalados corretamente.")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())