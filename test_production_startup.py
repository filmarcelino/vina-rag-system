#!/usr/bin/env python3
"""
Teste de inicializa√ß√£o em ambiente de produ√ß√£o
Simula as condi√ß√µes do Render para identificar problemas de deploy
"""

import os
import sys
import time
import subprocess
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent / "src"))

def simulate_render_environment():
    """Simula vari√°veis de ambiente do Render"""
    print("üèóÔ∏è  Simulando ambiente do Render...")
    
    # Vari√°veis t√≠picas do Render
    render_env = {
        "RENDER": "true",
        "RENDER_SERVICE_NAME": "vina-rag-api",
        "RENDER_SERVICE_TYPE": "web",
        "PORT": "10000",  # Porta t√≠pica do Render
        "HOST": "0.0.0.0",
        "ENVIRONMENT": "production",
        "LOG_LEVEL": "INFO",
        "PYTHONPATH": "/opt/render/project/src",
        "PYTHON_VERSION": "3.11",
        "MAX_SEARCH_RESULTS": "50",
        "SEARCH_TIMEOUT": "30",
        "WORKERS": "1",
        "CORS_ORIGINS": "*",
        "RATE_LIMIT_REQUESTS": "100",
        "RATE_LIMIT_WINDOW": "60",
        "CACHE_TTL": "3600",
        "OPENAI_MODEL": "gpt-4o-mini",
        "EMBEDDING_MODEL": "text-embedding-3-small"
    }
    
    # Aplicar vari√°veis de ambiente
    for key, value in render_env.items():
        os.environ[key] = value
        print(f"  üìù {key}={value}")
    
    print("  ‚úÖ Ambiente do Render simulado")

def test_production_startup():
    """Testa inicializa√ß√£o em modo produ√ß√£o"""
    print("\nüöÄ Testando inicializa√ß√£o em modo produ√ß√£o...")
    
    try:
        # Importar e inicializar componentes como no main.py
        from config.config import RAGConfig
        from src.search.search_engine import SearchEngine
        from src.observability.logging_manager import LoggingManager
        from src.observability.metrics_collector import MetricsCollector
        
        print("  ‚úÖ Importa√ß√µes OK")
        
        # Inicializar na ordem do main.py
        start_time = time.time()
        
        # 1. Configura√ß√£o
        config = RAGConfig()
        print("  ‚úÖ RAGConfig inicializada")
        
        # 2. Logging
        logging_manager = LoggingManager(app_name="rag_system")
        print("  ‚úÖ LoggingManager inicializado")
        
        # 3. M√©tricas
        metrics_collector = MetricsCollector()
        print("  ‚úÖ MetricsCollector inicializado")
        
        # 4. Motor de busca (sem API key real)
        search_engine = SearchEngine(api_key="demo-key")
        print("  ‚úÖ SearchEngine inicializado")
        
        init_time = time.time() - start_time
        print(f"  ‚è±Ô∏è  Tempo total de inicializa√ß√£o: {init_time:.2f}s")
        
        if init_time > 30:
            print("  ‚ö†Ô∏è  AVISO: Inicializa√ß√£o muito lenta para o Render")
        else:
            print("  ‚úÖ Tempo de inicializa√ß√£o aceit√°vel")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na inicializa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_fastapi_startup():
    """Testa se o FastAPI pode ser inicializado"""
    print("\nüåê Testando inicializa√ß√£o do FastAPI...")
    
    try:
        # Definir vari√°veis de ambiente necess√°rias antes de importar
        os.environ["OPENAI_API_KEY"] = "demo-key"
        os.environ["RAG_API_KEY"] = "demo-rag-key"
        
        from fastapi import FastAPI
        from fastapi.middleware.cors import CORSMiddleware
        from slowapi import Limiter, _rate_limit_exceeded_handler
        from slowapi.util import get_remote_address
        from slowapi.errors import RateLimitExceeded
        
        print("  ‚úÖ Importa√ß√µes FastAPI OK")
        
        # Criar app como no main.py
        app = FastAPI(
            title="Sistema RAG - API de Busca Inteligente",
            description="API para busca sem√¢ntica e h√≠brida em documentos",
            version="1.0.0",
            docs_url="/docs",
            redoc_url="/redoc"
        )
        
        print("  ‚úÖ FastAPI app criada")
        
        # Configurar CORS
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        print("  ‚úÖ CORS configurado")
        
        # Configurar rate limiting
        limiter = Limiter(key_func=get_remote_address)
        app.state.limiter = limiter
        app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
        
        print("  ‚úÖ Rate limiting configurado")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na configura√ß√£o FastAPI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_uvicorn_compatibility():
    """Testa compatibilidade com Uvicorn"""
    print("\nü¶Ñ Testando compatibilidade com Uvicorn...")
    
    try:
        import uvicorn
        print(f"  ‚úÖ Uvicorn vers√£o: {uvicorn.__version__}")
        
        # Testar configura√ß√£o do servidor
        host = os.getenv("HOST", "0.0.0.0")
        port = int(os.getenv("PORT", 8000))
        workers = int(os.getenv("WORKERS", 1))
        
        print(f"  üì° Host: {host}")
        print(f"  üîå Port: {port}")
        print(f"  üë• Workers: {workers}")
        
        # Verificar se a configura√ß√£o √© v√°lida
        if host in ["0.0.0.0", "127.0.0.1", "localhost"]:
            print("  ‚úÖ Host v√°lido")
        else:
            print(f"  ‚ö†Ô∏è  Host incomum: {host}")
        
        if 1000 <= port <= 65535:
            print("  ‚úÖ Porta v√°lida")
        else:
            print(f"  ‚ö†Ô∏è  Porta fora do range padr√£o: {port}")
        
        if 1 <= workers <= 4:
            print("  ‚úÖ N√∫mero de workers adequado")
        else:
            print(f"  ‚ö†Ô∏è  N√∫mero de workers incomum: {workers}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro com Uvicorn: {e}")
        return False

def test_health_check_simulation():
    """Simula o health check do Render"""
    print("\nüè• Simulando health check do Render...")
    
    try:
        # Simular requisi√ß√£o de health check
        import json
        
        # Dados que o health check deveria retornar
        health_data = {
            "status": "healthy",
            "timestamp": time.time(),
            "components": {
                "search_engine": "operational",
                "metrics": "operational",
                "logging": "operational"
            }
        }
        
        print(f"  üìä Health check response: {json.dumps(health_data, indent=2)}")
        print("  ‚úÖ Health check simulado com sucesso")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no health check: {e}")
        return False

def main():
    """Executa todos os testes de produ√ß√£o"""
    print("üîç TESTE DE INICIALIZA√á√ÉO EM PRODU√á√ÉO")
    print("=" * 50)
    
    # Simular ambiente do Render
    simulate_render_environment()
    
    # Executar testes
    tests = [
        ("Inicializa√ß√£o dos componentes", test_production_startup),
        ("Configura√ß√£o FastAPI", test_fastapi_startup),
        ("Compatibilidade Uvicorn", test_uvicorn_compatibility),
        ("Health Check", test_health_check_simulation)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ Executando: {test_name}")
        result = test_func()
        results.append((test_name, result))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES")
    print("=" * 50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {status}: {test_name}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\n‚úÖ O servi√ßo deve funcionar corretamente no Render")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Configurar OPENAI_API_KEY no Render")
        print("   2. Configurar RAG_API_KEY no Render")
        print("   3. Fazer deploy")
        print("   4. Verificar logs de inicializa√ß√£o")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("\nüîß Corrija os problemas antes do deploy")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)