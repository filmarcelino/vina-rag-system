#!/usr/bin/env python3
"""
Script de diagn√≥stico para problemas de deploy no Render
Testa configura√ß√µes espec√≠ficas que podem causar erro 503
"""

import os
import sys
import time
import requests
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent / "src"))

def test_environment_variables():
    """Testa se todas as vari√°veis de ambiente necess√°rias est√£o configuradas"""
    print("üîß Testando vari√°veis de ambiente...")
    
    required_vars = [
        "OPENAI_API_KEY",
        "RAG_API_KEY"
    ]
    
    optional_vars = [
        "PORT",
        "HOST",
        "ENVIRONMENT",
        "LOG_LEVEL",
        "PYTHONPATH"
    ]
    
    print("\nüìã Vari√°veis obrigat√≥rias:")
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {'*' * 10}...{value[-4:] if len(value) > 4 else value}")
        else:
            print(f"  ‚ùå {var}: N√ÉO CONFIGURADA")
    
    print("\nüìã Vari√°veis opcionais:")
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ö†Ô∏è  {var}: usando padr√£o")
    
    # Verificar PORT espec√≠fica do Render
    port = os.getenv("PORT")
    if port:
        print(f"\nüö¢ Render PORT detectada: {port}")
    else:
        print("\n‚ö†Ô∏è  PORT n√£o definida - usando padr√£o 8000")

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("\nüì¶ Testando importa√ß√µes...")
    
    modules_to_test = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "uvicorn"),
        ("openai", "OpenAI"),
        ("config.config", "RAGConfig"),
        ("src.search.search_engine", "SearchEngine"),
        ("src.observability.logging_manager", "LoggingManager"),
        ("src.observability.metrics_collector", "MetricsCollector")
    ]
    
    for module_name, class_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print(f"  ‚úÖ {module_name}.{class_name}")
        except Exception as e:
            print(f"  ‚ùå {module_name}.{class_name}: {e}")

def test_server_startup():
    """Testa se o servidor pode ser iniciado sem erros"""
    print("\nüöÄ Testando inicializa√ß√£o do servidor...")
    
    try:
        # Importar componentes principais
        from config.config import RAGConfig
        from src.search.search_engine import SearchEngine
        from src.observability.logging_manager import LoggingManager
        from src.observability.metrics_collector import MetricsCollector
        
        print("  ‚úÖ Importa√ß√µes principais OK")
        
        # Testar configura√ß√£o
        config = RAGConfig()
        print("  ‚úÖ RAGConfig inicializada")
        
        # Testar componentes
        logging_manager = LoggingManager(app_name="rag_system")
        print("  ‚úÖ LoggingManager inicializado")
        
        metrics_collector = MetricsCollector()
        print("  ‚úÖ MetricsCollector inicializado")
        
        search_engine = SearchEngine(config)
        print("  ‚úÖ SearchEngine inicializado")
        
        print("\nüéâ Todos os componentes inicializaram com sucesso!")
        
    except Exception as e:
        print(f"  ‚ùå Erro na inicializa√ß√£o: {e}")
        import traceback
        traceback.print_exc()

def test_network_configuration():
    """Testa configura√ß√µes de rede que podem causar erro 503"""
    print("\nüåê Testando configura√ß√µes de rede...")
    
    # Verificar HOST e PORT
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    
    print(f"  üì° HOST configurado: {host}")
    print(f"  üîå PORT configurada: {port}")
    
    # Verificar se a porta est√° dispon√≠vel
    import socket
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((host, port))
        sock.close()
        print(f"  ‚úÖ Porta {port} dispon√≠vel")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Porta {port} pode estar em uso: {e}")
    
    # Verificar CORS
    cors_origins = os.getenv("CORS_ORIGINS", "*")
    print(f"  üîó CORS Origins: {cors_origins}")

def test_render_specific_issues():
    """Testa problemas espec√≠ficos do Render que podem causar erro 503"""
    print("\nüèóÔ∏è  Testando problemas espec√≠ficos do Render...")
    
    # Verificar se est√° rodando no Render
    render_service = os.getenv("RENDER_SERVICE_NAME")
    if render_service:
        print(f"  üö¢ Rodando no Render: {render_service}")
    else:
        print("  üè† Rodando localmente")
    
    # Verificar timeout de inicializa√ß√£o
    print("  ‚è±Ô∏è  Simulando tempo de inicializa√ß√£o...")
    start_time = time.time()
    
    # Simular inicializa√ß√£o pesada
    time.sleep(2)
    
    init_time = time.time() - start_time
    print(f"  üìä Tempo de inicializa√ß√£o simulado: {init_time:.2f}s")
    
    if init_time > 60:
        print("  ‚ö†Ô∏è  AVISO: Inicializa√ß√£o muito lenta pode causar timeout no Render")
    else:
        print("  ‚úÖ Tempo de inicializa√ß√£o aceit√°vel")
    
    # Verificar mem√≥ria
    try:
        import psutil
        memory_mb = psutil.virtual_memory().total / (1024 * 1024)
        print(f"  üíæ Mem√≥ria dispon√≠vel: {memory_mb:.0f}MB")
        
        if memory_mb < 512:
            print("  ‚ö†Ô∏è  AVISO: Pouca mem√≥ria dispon√≠vel")
        else:
            print("  ‚úÖ Mem√≥ria suficiente")
    except ImportError:
        print("  ‚ö†Ô∏è  psutil n√£o dispon√≠vel - n√£o foi poss√≠vel verificar mem√≥ria")

def main():
    """Executa todos os testes de diagn√≥stico"""
    print("üîç DIAGN√ìSTICO DE DEPLOY NO RENDER")
    print("=" * 50)
    
    test_environment_variables()
    test_imports()
    test_server_startup()
    test_network_configuration()
    test_render_specific_issues()
    
    print("\n" + "=" * 50)
    print("üèÅ Diagn√≥stico conclu√≠do!")
    print("\nüí° Se todos os testes passaram mas ainda h√° erro 503:")
    print("   1. Verifique os logs do Render")
    print("   2. Confirme se o health check est√° respondendo")
    print("   3. Verifique se o servi√ßo est√° escutando na porta correta")
    print("   4. Confirme se n√£o h√° timeout de inicializa√ß√£o")

if __name__ == "__main__":
    main()